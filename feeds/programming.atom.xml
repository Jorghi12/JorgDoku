<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My Photoelectric Blog</title><link href="http://sanghan.me/" rel="alternate"></link><link href="http://sanghan.me/feeds/programming.atom.xml" rel="self"></link><id>http://sanghan.me/</id><updated>2014-06-09T00:00:00-07:00</updated><entry><title>Pelican: A Blogging Engine Written in Python</title><link href="http://sanghan.me/blog/2014/06/pelican_blog/" rel="alternate"></link><updated>2014-06-09T00:00:00-07:00</updated><author><name>Sang Han</name></author><id>tag:sanghan.me,2014-06-09:blog/2014/06/pelican_blog/</id><summary type="html">&lt;p&gt;There are many static site generators out&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;The most famous and well known being,
&lt;a class="reference external" href="http://jekyllrb.com"&gt;Jekyll&lt;/a&gt; and &lt;a class="reference external" href="http://octopress.org"&gt;Octopress&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jekyll is used by Github Pages as the default generator,
while Octopress is a framework for Jekyll geared specifically for blogging.
However, the reason why I decided to use Pelican over both,
is because Pelican is written in Python, and therefore support the
reStructuredText markup by default and
is a language I feel comfortable in case I need to get down and fix the
engine. One of my primary forcuses of blogging is so that I can also use it as
a platform for learning more about programming. I don&amp;#8217;t program in ruby
so, I wanted to go with an all Python&amp;nbsp;solution.&lt;/p&gt;
&lt;div class="section" id="enter-pelican"&gt;
&lt;h2&gt;Enter&amp;nbsp;Pelican&lt;/h2&gt;
&lt;p&gt;So Pelican became my blogging engine of choice.
There are a couple other generators written with Python like
&lt;a class="reference external" href="http://ringce.com/hyde"&gt;Hyde&lt;/a&gt; and &lt;a class="reference external" href="http://getnikola.com"&gt;Nicola&lt;/a&gt;,
but it seemed like Pelican was better supported and documented of the batch,
so thats what I went&amp;nbsp;with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-does-it-work"&gt;
&lt;h2&gt;So How does it&amp;nbsp;Work?&lt;/h2&gt;
&lt;blockquote class="pull-quote"&gt;
A generator is basically some arbitrary code that will output more arbitrary code.&lt;/blockquote&gt;
&lt;p&gt;In this case of pelican, it will take my articles written in the reStructuredText
markup and then generate &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; based on the Jinja2 templating&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sounds simple enough&amp;nbsp;right?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pelican utilized metadata that the user supplies in the form of a configuration file
located at the root of the project directory. This configuration file helps
Pelican figure out some user specific details that are necessary in order to
build the webpage, very similar to how Sphinx generates&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;Here is a snippet of how this blog&amp;#8217;s configuration file&amp;nbsp;looks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curdir&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Sang Han&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SINGLE_AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My Photoelectric Blog&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://sanghan.me&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the syntax is just Python. The first block
is just a shebang line specifying the default python
interpreter. We then append the current directory into the
Python &lt;span class="caps"&gt;PATH&lt;/span&gt; and then start filling out some global variables which
Pelican will use later to generate the&amp;nbsp;blog.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="Programming"></category><category term="Blog"></category></entry><entry><title>Bubble Sort Written in Swift</title><link href="http://sanghan.me/blog/2014/06/swift_bubble_sort/" rel="alternate"></link><updated>2014-06-04T00:00:00-07:00</updated><author><name>Sang Han</name></author><id>tag:sanghan.me,2014-06-04:blog/2014/06/swift_bubble_sort/</id><summary type="html">&lt;style type="text/css"&gt;
  p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #586e75}
  p.p2 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #839496; min-height: 16.0px}
  p.p3 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #839496}
  p.p4 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #278bd2}
  p.p5 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #b58901}
  p.p6 {margin: 0.0px 0.0px 0.0px 0.0px; font: 14.0px 'DejaVu Sans Mono for Powerline'; color: #29a198}
  span.s1 {color: #859901}
  span.s2 {color: #b58901}
  span.s3 {color: #29a198}
  span.s4 {color: #839496}
  span.s5 {color: #6c71c4}
  code { border: 1px solid #&lt;span class="caps"&gt;CCCCCC&lt;/span&gt;;
    background: none repeat scroll 0 0 #&lt;span class="caps"&gt;FDF6E3&lt;/span&gt;;
    color: #657B83;
    border-radius: 4px;
    display: block;
    font-size: 14px;
    line-height: 1.42857;
    margin: 0 0 10.5px;
    padding: 10px;
    word-break: break-all;
    word-wrap: break-word; }
&lt;/style&gt;
&lt;code&gt;
&lt;p class="p1"&gt;// Sang&amp;nbsp;Han&lt;/p&gt;
&lt;p class="p1"&gt;// An implementation of a bubble party/bubble sort written in&amp;nbsp;swift&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s1"&gt;protocol&lt;/span&gt; RandomPartyGenerator&amp;nbsp;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;func&lt;/span&gt; random() -&amp;gt; &lt;span class="s1"&gt;Double&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;}&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s1"&gt;class&lt;/span&gt; BubblePartyGenerator: &lt;span class="s2"&gt;RandomPartyGenerator&lt;/span&gt;&amp;nbsp;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;var&lt;/span&gt; lastTime = &lt;span class="s3"&gt;42.0&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt; soberietyLevel = &lt;span class="s3"&gt;3817.0&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt; someLOLOLOLs = &lt;span class="s3"&gt;29573.0&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt; nextDayRegrets = &lt;span class="s3"&gt;139968.0&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;func&lt;/span&gt; random() -&amp;gt; &lt;span class="s1"&gt;Double&lt;/span&gt;&amp;nbsp;{&lt;/p&gt;
&lt;p class="p4"&gt;&lt;span class="s4"&gt;&lt;span class="Apple-converted-space"&gt;        &lt;/span&gt;&lt;/span&gt;lastTime&lt;span class="s4"&gt; = ((&lt;/span&gt;lastTime&lt;span class="s4"&gt; * &lt;/span&gt;soberietyLevel&lt;span class="s4"&gt; + &lt;/span&gt;someLOLOLOLs&lt;span class="s4"&gt;) % &lt;/span&gt;nextDayRegrets&lt;span class="s4"&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p class="p4"&gt;&lt;span class="s4"&gt;&lt;span class="Apple-converted-space"&gt;        &lt;/span&gt;&lt;/span&gt;&lt;span class="s1"&gt;return&lt;/span&gt;&lt;span class="s4"&gt; (&lt;/span&gt;lastTime&lt;span class="s4"&gt; / &lt;/span&gt;nextDayRegrets&lt;span class="s4"&gt;) * &lt;/span&gt;&lt;span class="s3"&gt;100&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;}&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s1"&gt;func&lt;/span&gt; randomPeople(partySize: &lt;span class="s1"&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class="s1"&gt;Int&lt;/span&gt;[]&lt;/p&gt;
&lt;p class="p3"&gt;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;var&lt;/span&gt; invites: &lt;span class="s1"&gt;Int&lt;/span&gt;[] =&amp;nbsp;[]&lt;/p&gt;
&lt;p class="p5"&gt;&lt;span class="s4"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt;&lt;span class="s4"&gt; generator = &lt;/span&gt;BubblePartyGenerator&lt;span class="s4"&gt;()&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;_&lt;/span&gt; &lt;span class="s1"&gt;in&lt;/span&gt; &lt;span class="s3"&gt;0&lt;/span&gt;..partySize&amp;nbsp;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;        &lt;/span&gt;invites.&lt;span class="s1"&gt;append&lt;/span&gt;(&lt;span class="s1"&gt;Int&lt;/span&gt;(generator.&lt;span class="s3"&gt;random&lt;/span&gt;() * &lt;span class="s3"&gt;100&lt;/span&gt;))&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;return&lt;/span&gt;&amp;nbsp;invites&lt;/p&gt;
&lt;p class="p3"&gt;}&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="s1"&gt;func&lt;/span&gt; bubbleParty(sexyPeople: &lt;span class="s1"&gt;Int&lt;/span&gt;[]) -&amp;gt; &lt;span class="s1"&gt;Int&lt;/span&gt;[]&lt;/p&gt;
&lt;p class="p3"&gt;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt; guestList = sexyPeople.&lt;span class="s5"&gt;count&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;var&lt;/span&gt; isFlippyFloppy = &lt;span class="s5"&gt;true&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;for&lt;/span&gt; theLadies &lt;span class="s1"&gt;in&lt;/span&gt; &lt;span class="s3"&gt;0&lt;/span&gt;..guestList&amp;nbsp;{&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;if&lt;/span&gt; isFlippyFloppy&amp;nbsp;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;            &lt;/span&gt;isFlippyFloppy = &lt;span class="s5"&gt;false&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;for&lt;/span&gt; theHomies &lt;span class="s1"&gt;in&lt;/span&gt; &lt;span class="s3"&gt;0&lt;/span&gt;..guestList-theLadies-&lt;span class="s3"&gt;1&lt;/span&gt;&amp;nbsp;{&lt;/p&gt;
&lt;p class="p1"&gt;&lt;span class="s4"&gt;&lt;span class="Apple-converted-space"&gt;                &lt;/span&gt;&lt;/span&gt;// Ladies to the&amp;nbsp;front&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                &lt;/span&gt;&lt;span class="s1"&gt;if&lt;/span&gt; (sexyPeople[theHomies] &amp;gt; sexyPeople[theHomies+&lt;span class="s3"&gt;1&lt;/span&gt;])&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                &lt;/span&gt;{&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                    &lt;/span&gt;(sexyPeople[theHomies], sexyPeople[theHomies+&lt;span class="s3"&gt;1&lt;/span&gt;])&amp;nbsp;=&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                        &lt;/span&gt;(sexyPeople[theHomies+&lt;span class="s3"&gt;1&lt;/span&gt;],&amp;nbsp;sexyPeople[theHomies])&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                    &lt;/span&gt;isFlippyFloppy = &lt;span class="s5"&gt;true&lt;/span&gt;&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;                &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;            &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;        &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;}&lt;/p&gt;
&lt;p class="p3"&gt;&lt;span class="Apple-converted-space"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;return&lt;/span&gt;&amp;nbsp;sexyPeople&lt;/p&gt;
&lt;p class="p3"&gt;}&lt;/p&gt;
&lt;p class="p2"&gt;&lt;br&gt;&lt;/p&gt;
&lt;p class="p6"&gt;&lt;span class="s1"&gt;println&lt;/span&gt;&lt;span class="s4"&gt;(&lt;/span&gt;bubbleParty&lt;span class="s4"&gt;(&lt;/span&gt;randomPeople&lt;span class="s4"&gt;(&lt;/span&gt;100&lt;span class="s4"&gt;)))&lt;/span&gt;&lt;/p&gt;
&lt;/code&gt;</summary><category term="Apple"></category><category term="Languages"></category><category term="WWDC"></category></entry></feed>